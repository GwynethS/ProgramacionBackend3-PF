paths:
  /api/users:
    get:
      summary: Get all users from the database
      tags:
        - Users
      responses:
        "200":
          description: Successfully retrieved all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/User"
        "500":
          description: Internal server error
  /api/users/{uid}:
    get:
      summary: Get a single user by ID
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: ID of the user to retrieve
          schema:
            type: string
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/User"
        "500":
          description: Internal server error
    put:
      summary: Update user by ID
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: ID of the user to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#components/requestBodies/updateUser"
      responses:
        "200":
          description: User successfully updated
        "404":
          description: User not found
        "500":
          description: Internal server error
components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          format: objectid
          description: Auto-generated ID by MongoDB
        first_name:
          type: string
          description: User's first name
        last_name:
          type: string
          description: User's last name
        email:
          type: string
          description: User's email
        password:
          type: string
          description: User's hashed password
        role:
          type: string
          enum: [user, admin]
          description: User's role in the system
        pets:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
                format: objectid
                description: Pet's ID
      example:
        _id: "679d8c0f1f4448a0fc24d5b9"
        first_name: "Carlie"
        last_name: "Rohan"
        email: "Melody10@gmail.com"
        password: "$2b$10$MztrvtdBUgUCKropw9WJW.jG17c8Yjz9A7XBTF1R/OyHo6w5BfqsW"
        role: "user"
        pets:
          - _id: "6aaa84bad4dd297ffbe7bc1a"
  requestBodies:
    updateUser:
      type: object
      properties:
        first_name:
          type: string
          description: User's first name
        last_name:
          type: string
          description: User's last name
        email:
          type: string
          description: User's email
        password:
          type: string
          description: User's password
        role:
          type: string
          enum: [user, admin]
          description: User's role in the system
        pets:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
                format: objectid
                description: Pet's ID
      example:
        first_name: Mirtha
        last_name: Legrand
        email: lachiqui@legrand.com
        password: "1234"
        role: "user"
        pets:
          - _id: "6aaa84bad4dd297ffbe7bc1a"
